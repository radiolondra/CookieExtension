@page "/contentscript.html"
@inherits BasePage
@using CookieExtension.Models
@using Newtonsoft.Json

@inject IJSRuntime js
@inject IBlazorStrap blazorStrap


<CookiesGrid 
    Modal="@Modal" 
    cc="@cc" 
    ExternalChange="@OnChange" 
    ExternalFilter="@CustomFilter" 
    ExternalGetCookies="@GetAllBrowserCookies">
</CookiesGrid>

@code {
    private static BSModal Modal { get; set; } = new BSModal();
    private static BSButton btn { get; set; } = new BSButton();

    private static CookiesClass cc = new CookiesClass(20,1);

    private static string ReturnedValue = string.Empty;    

    /// <summary>
    /// Gets all the browser active cookies calling getAllCookies() javascript function
    /// </summary>
    /// <returns></returns>
    private async Task GetAllBrowserCookies()
    {        
        cc.data.Clear();

        await js.InvokeVoidAsync("getAllCookiesMessage");
        //await js.InvokeVoidAsync("console.log", $"COOKIES COUNT:{cookies.Count}");
    }    

    /// <summary>
    /// Called from getAllCookies() javascript function
    /// </summary>
    /// <param name="value">Returned JSON string containing all the cookies found.</param>
    [JSInvokable]
    public static void ShowAllActiveCookies(string value)
    {        
        ReturnedValue = value;

        CookieItem[] temp = JsonConvert.DeserializeObject<CookieItem[]>(ReturnedValue);

        foreach(CookieItem ci in temp)
        {
            cc.data.Add(ci);
        }           

        cc._count = cc.data.Count();
        cc._cookies = cc.data.Skip(cc._startPage * cc.ItemsPerPage).Take(cc.ItemsPerPage);

    } 

    /* Port SendMessage tests. To be continued. See BackgroundWorker js
    private async Task WEGetAllCookies()
    {
        cc.data.Clear();
        var properties = new WebExtensions.Net.Runtime.ConnectInfo();
        properties.Name = "CEPort";

        //var port = await WebExtensions.Runtime.Connect(null, properties);

        var m = await WebExtensions.Runtime.SendMessage(null, "getAllCookies", null);

        await js.InvokeVoidAsync("alert", $"RETURN:{m}");

    }
    */

    protected override void OnInitialized()
    {
        //js.InvokeVoidAsync("alert", $"In OnInitialized");
        cc._count = 0;
    }

    /// <summary>
    /// OnChange event for the BS table
    /// </summary>
    /// <param name="dataRequest"></param>
    private void OnChange(DataRequest dataRequest)
    {
        cc.OnChange(dataRequest);
        StateHasChanged();
    }
    /// <summary>
    /// Filter method for BS table
    /// </summary>
    /// <param name="e"></param>
    private void CustomFilter(string e)
    {
        cc.CustomFilter(e);
        StateHasChanged();
    }
}
